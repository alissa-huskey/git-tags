#!/usr/bin/env python

"""Print list of git tags with details"""

import subprocess

def shell(*cmd):
    """Run the command in text mode and capture output, return CompletedProcess instance
    raise CalledProcessError for non-zero exit code
    """
    result = subprocess.run(cmd, text=True, capture_output=True)
    result.check_returncode()
    return result

def color(name, default="normal"):
    """Return git config value for color.name or default"""
    result = shell("git", "config", f"color.{name}")
    value = result.stdout.strip() or default
    return f"%(color:{value})"

def gettags():
    """Return the length of the longest tag"""
    result = shell("git", "tag")
    return result.stdout.splitlines()

def main():
    """Print list of git tags including: tag, sha, date, annotation/message"""
    tags = gettags()
    if not tags:
        return

    # length of longest tag
    width = max(map(len, tags))

    # construct format string
    fmt = (
        color("decorate.tag") + f"%(align:{width},left)%(refname:short)%(end) "  + # tag
        color("diff.meta") + "%(objectname:short)%(color:reset) "                  # SHA
        "%(authordate:short)%(*authordate:short) "                                 # date
        "%(subject)"                                                               # annotation/message
    )

    # construct command
    command=[
        "git",
        "for-each-ref",
        "--sort=-taggerdate",
        f"--format={fmt}",
        "refs/tags"
    ]

    # for debugging
    # print(*command, "\n")

    # run command
    subprocess.run(command)

if __name__ == "__main__":
    main()
